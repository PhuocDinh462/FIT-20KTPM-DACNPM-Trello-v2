syntax = "proto3";
package trello.cardlist;
import "card.proto";
import "common.proto";

message CardlistSchema {
  string _id=1;
  string name=2;
  int32 index=3;
  repeated string watcher_email=4;
  optional string archive_at=5;
  optional string cover=6;
  optional string description=7;
  repeated trello.card.CardSchema cards=8;
  optional string created_at=9;
}

message GetAllCardlistResponseSchema {
  repeated CardlistSchema data=1;
}

message CardlistInfoResponse {
  CardlistSchema data=1;
}

message CreateCardlistRequestSchema {
  string board_id=1;
  int32 index=2;
  string name=3;
}

message CopyCardlistRequestSchema{
  string _id=1;
  optional string create_at=2;
}

message GetAllByBoardIdRequestSchema {
  string board_id=1;
}

message UpdateCardlistRequestSchema {
  string _id=1;
  optional int32 index=2;
  optional string archive_at=3;
  optional string name=4;
}

message MoveCardlistRequestSchema{
  string _id=1;
  int32 index=2;
  string board_id=3;
}

service CardlistService {
  rpc GetAllCardlist(trello.common.Void) returns (GetAllCardlistResponseSchema);
  rpc CreateCardlist(CreateCardlistRequestSchema) returns (CardlistInfoResponse);
  rpc CopyCardlist(CopyCardlistRequestSchema) returns (CardlistInfoResponse);
  rpc GetAllByBoardId(GetAllByBoardIdRequestSchema) returns (GetAllCardlistResponseSchema);
  rpc SortByOldestDate(GetAllByBoardIdRequestSchema) returns (GetAllCardlistResponseSchema);
  rpc SortByNewestDate(GetAllByBoardIdRequestSchema) returns (GetAllCardlistResponseSchema);
  rpc SortByName(GetAllByBoardIdRequestSchema) returns (GetAllCardlistResponseSchema);
  rpc UpdateCardlist(UpdateCardlistRequestSchema) returns (CardlistInfoResponse);
  rpc MoveCardlist(MoveCardlistRequestSchema) returns (CardlistInfoResponse);

}