'use strict';

var googleProtobuf = require('google-protobuf');
var empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');

function _interopNamespaceDefault(e) {
	var n = Object.create(null);
	if (e) {
		Object.keys(e).forEach(function (k) {
			if (k !== 'default') {
				var d = Object.getOwnPropertyDescriptor(e, k);
				Object.defineProperty(n, k, d.get ? d : {
					enumerable: true,
					get: function () { return e[k]; }
				});
			}
		});
	}
	n.default = e;
	return Object.freeze(n);
}

var googleProtobuf__namespace = /*#__PURE__*/_interopNamespaceDefault(googleProtobuf);
var empty_pb__namespace = /*#__PURE__*/_interopNamespaceDefault(empty_pb);

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var user_service_pb$1 = {};

var require$$0 = /*@__PURE__*/getAugmentedNamespace(googleProtobuf__namespace);

var user_pb = {};

var activity_pb = {};

(function (exports) {
	// source: activity.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	goog.exportSymbol('proto.trello.activity.ActivitySchema', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.trello.activity.ActivitySchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.trello.activity.ActivitySchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.trello.activity.ActivitySchema.displayName = 'proto.trello.activity.ActivitySchema';
	}



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.trello.activity.ActivitySchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.trello.activity.ActivitySchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.trello.activity.ActivitySchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.trello.activity.ActivitySchema.toObject = function(includeInstance, msg) {
	  var obj = {
	    workspaceId: jspb.Message.getFieldWithDefault(msg, 1, ""),
	    boardId: jspb.Message.getFieldWithDefault(msg, 2, ""),
	    cardlistId: jspb.Message.getFieldWithDefault(msg, 3, ""),
	    cardId: jspb.Message.getFieldWithDefault(msg, 4, ""),
	    content: jspb.Message.getFieldWithDefault(msg, 5, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.trello.activity.ActivitySchema}
	 */
	proto.trello.activity.ActivitySchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.trello.activity.ActivitySchema;
	  return proto.trello.activity.ActivitySchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.trello.activity.ActivitySchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.trello.activity.ActivitySchema}
	 */
	proto.trello.activity.ActivitySchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setWorkspaceId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setBoardId(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCardlistId(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCardId(value);
	      break;
	    case 5:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setContent(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.trello.activity.ActivitySchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.trello.activity.ActivitySchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.trello.activity.ActivitySchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.trello.activity.ActivitySchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getWorkspaceId();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = message.getContent();
	  if (f.length > 0) {
	    writer.writeString(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional string workspace_id = 1;
	 * @return {string}
	 */
	proto.trello.activity.ActivitySchema.prototype.getWorkspaceId = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.activity.ActivitySchema} returns this
	 */
	proto.trello.activity.ActivitySchema.prototype.setWorkspaceId = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};


	/**
	 * optional string board_id = 2;
	 * @return {string}
	 */
	proto.trello.activity.ActivitySchema.prototype.getBoardId = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.activity.ActivitySchema} returns this
	 */
	proto.trello.activity.ActivitySchema.prototype.setBoardId = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.trello.activity.ActivitySchema} returns this
	 */
	proto.trello.activity.ActivitySchema.prototype.clearBoardId = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.trello.activity.ActivitySchema.prototype.hasBoardId = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional string cardlist_id = 3;
	 * @return {string}
	 */
	proto.trello.activity.ActivitySchema.prototype.getCardlistId = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.activity.ActivitySchema} returns this
	 */
	proto.trello.activity.ActivitySchema.prototype.setCardlistId = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.trello.activity.ActivitySchema} returns this
	 */
	proto.trello.activity.ActivitySchema.prototype.clearCardlistId = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.trello.activity.ActivitySchema.prototype.hasCardlistId = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional string card_id = 4;
	 * @return {string}
	 */
	proto.trello.activity.ActivitySchema.prototype.getCardId = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.activity.ActivitySchema} returns this
	 */
	proto.trello.activity.ActivitySchema.prototype.setCardId = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.trello.activity.ActivitySchema} returns this
	 */
	proto.trello.activity.ActivitySchema.prototype.clearCardId = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.trello.activity.ActivitySchema.prototype.hasCardId = function() {
	  return jspb.Message.getField(this, 4) != null;
	};


	/**
	 * optional string content = 5;
	 * @return {string}
	 */
	proto.trello.activity.ActivitySchema.prototype.getContent = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.activity.ActivitySchema} returns this
	 */
	proto.trello.activity.ActivitySchema.prototype.setContent = function(value) {
	  return jspb.Message.setProto3StringField(this, 5, value);
	};


	goog.object.extend(exports, proto.trello.activity); 
} (activity_pb));

(function (exports) {
	// source: user.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	var activity_pb$1 = activity_pb;
	goog.object.extend(proto, activity_pb$1);
	goog.exportSymbol('proto.trello.user.UserSchema', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.trello.user.UserSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.trello.user.UserSchema.repeatedFields_, null);
	};
	goog.inherits(proto.trello.user.UserSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.trello.user.UserSchema.displayName = 'proto.trello.user.UserSchema';
	}

	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.trello.user.UserSchema.repeatedFields_ = [5,6];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.trello.user.UserSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.trello.user.UserSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.trello.user.UserSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.trello.user.UserSchema.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
	    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
	    bio: jspb.Message.getFieldWithDefault(msg, 3, ""),
	    avatar: jspb.Message.getFieldWithDefault(msg, 4, ""),
	    activitiesList: jspb.Message.toObjectList(msg.getActivitiesList(),
	    activity_pb$1.ActivitySchema.toObject, includeInstance),
	    workspaceIdList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.trello.user.UserSchema}
	 */
	proto.trello.user.UserSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.trello.user.UserSchema;
	  return proto.trello.user.UserSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.trello.user.UserSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.trello.user.UserSchema}
	 */
	proto.trello.user.UserSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setUsername(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setBio(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setAvatar(value);
	      break;
	    case 5:
	      var value = new activity_pb$1.ActivitySchema;
	      reader.readMessage(value,activity_pb$1.ActivitySchema.deserializeBinaryFromReader);
	      msg.addActivities(value);
	      break;
	    case 6:
	      var value = /** @type {string} */ (reader.readString());
	      msg.addWorkspaceId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.trello.user.UserSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.trello.user.UserSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.trello.user.UserSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.trello.user.UserSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	  f = message.getUsername();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getBio();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getAvatar();
	  if (f.length > 0) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = message.getActivitiesList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      5,
	      f,
	      activity_pb$1.ActivitySchema.serializeBinaryToWriter
	    );
	  }
	  f = message.getWorkspaceIdList();
	  if (f.length > 0) {
	    writer.writeRepeatedString(
	      6,
	      f
	    );
	  }
	};


	/**
	 * optional string _id = 1;
	 * @return {string}
	 */
	proto.trello.user.UserSchema.prototype.getId = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.user.UserSchema} returns this
	 */
	proto.trello.user.UserSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};


	/**
	 * optional string username = 2;
	 * @return {string}
	 */
	proto.trello.user.UserSchema.prototype.getUsername = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.user.UserSchema} returns this
	 */
	proto.trello.user.UserSchema.prototype.setUsername = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};


	/**
	 * optional string bio = 3;
	 * @return {string}
	 */
	proto.trello.user.UserSchema.prototype.getBio = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.user.UserSchema} returns this
	 */
	proto.trello.user.UserSchema.prototype.setBio = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * optional string avatar = 4;
	 * @return {string}
	 */
	proto.trello.user.UserSchema.prototype.getAvatar = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.user.UserSchema} returns this
	 */
	proto.trello.user.UserSchema.prototype.setAvatar = function(value) {
	  return jspb.Message.setProto3StringField(this, 4, value);
	};


	/**
	 * repeated trello.activity.ActivitySchema activities = 5;
	 * @return {!Array<!proto.trello.activity.ActivitySchema>}
	 */
	proto.trello.user.UserSchema.prototype.getActivitiesList = function() {
	  return /** @type{!Array<!proto.trello.activity.ActivitySchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, activity_pb$1.ActivitySchema, 5));
	};


	/**
	 * @param {!Array<!proto.trello.activity.ActivitySchema>} value
	 * @return {!proto.trello.user.UserSchema} returns this
	*/
	proto.trello.user.UserSchema.prototype.setActivitiesList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 5, value);
	};


	/**
	 * @param {!proto.trello.activity.ActivitySchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.trello.activity.ActivitySchema}
	 */
	proto.trello.user.UserSchema.prototype.addActivities = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.trello.activity.ActivitySchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.trello.user.UserSchema} returns this
	 */
	proto.trello.user.UserSchema.prototype.clearActivitiesList = function() {
	  return this.setActivitiesList([]);
	};


	/**
	 * repeated string workspace_id = 6;
	 * @return {!Array<string>}
	 */
	proto.trello.user.UserSchema.prototype.getWorkspaceIdList = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
	};


	/**
	 * @param {!Array<string>} value
	 * @return {!proto.trello.user.UserSchema} returns this
	 */
	proto.trello.user.UserSchema.prototype.setWorkspaceIdList = function(value) {
	  return jspb.Message.setField(this, 6, value || []);
	};


	/**
	 * @param {string} value
	 * @param {number=} opt_index
	 * @return {!proto.trello.user.UserSchema} returns this
	 */
	proto.trello.user.UserSchema.prototype.addWorkspaceId = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.trello.user.UserSchema} returns this
	 */
	proto.trello.user.UserSchema.prototype.clearWorkspaceIdList = function() {
	  return this.setWorkspaceIdList([]);
	};


	goog.object.extend(exports, proto.trello.user); 
} (user_pb));

var require$$3 = /*@__PURE__*/getAugmentedNamespace(empty_pb__namespace);

(function (exports) {
	// source: user_service.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	var user_pb$1 = user_pb;
	goog.object.extend(proto, user_pb$1);
	var activity_pb$1 = activity_pb;
	goog.object.extend(proto, activity_pb$1);
	var google_protobuf_empty_pb = require$$3;
	goog.object.extend(proto, google_protobuf_empty_pb);
	goog.exportSymbol('proto.trello.user_service.CreateUserSchema', null, global);
	goog.exportSymbol('proto.trello.user_service.FullAllUserInfoResponse', null, global);
	goog.exportSymbol('proto.trello.user_service.FullUserInfoResponse', null, global);
	goog.exportSymbol('proto.trello.user_service.UpdateUserSchema', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.trello.user_service.CreateUserSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.trello.user_service.CreateUserSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.trello.user_service.CreateUserSchema.displayName = 'proto.trello.user_service.CreateUserSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.trello.user_service.FullUserInfoResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.trello.user_service.FullUserInfoResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.trello.user_service.FullUserInfoResponse.displayName = 'proto.trello.user_service.FullUserInfoResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.trello.user_service.FullAllUserInfoResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.trello.user_service.FullAllUserInfoResponse.repeatedFields_, null);
	};
	goog.inherits(proto.trello.user_service.FullAllUserInfoResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.trello.user_service.FullAllUserInfoResponse.displayName = 'proto.trello.user_service.FullAllUserInfoResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.trello.user_service.UpdateUserSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.trello.user_service.UpdateUserSchema.repeatedFields_, null);
	};
	goog.inherits(proto.trello.user_service.UpdateUserSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.trello.user_service.UpdateUserSchema.displayName = 'proto.trello.user_service.UpdateUserSchema';
	}



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.trello.user_service.CreateUserSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.trello.user_service.CreateUserSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.trello.user_service.CreateUserSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.trello.user_service.CreateUserSchema.toObject = function(includeInstance, msg) {
	  var obj = {
	    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
	    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
	    bio: jspb.Message.getFieldWithDefault(msg, 3, ""),
	    avatar: jspb.Message.getFieldWithDefault(msg, 4, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.trello.user_service.CreateUserSchema}
	 */
	proto.trello.user_service.CreateUserSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.trello.user_service.CreateUserSchema;
	  return proto.trello.user_service.CreateUserSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.trello.user_service.CreateUserSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.trello.user_service.CreateUserSchema}
	 */
	proto.trello.user_service.CreateUserSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setEmail(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setUsername(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setBio(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setAvatar(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.trello.user_service.CreateUserSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.trello.user_service.CreateUserSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.trello.user_service.CreateUserSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.trello.user_service.CreateUserSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getEmail();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	  f = message.getUsername();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getBio();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getAvatar();
	  if (f.length > 0) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional string email = 1;
	 * @return {string}
	 */
	proto.trello.user_service.CreateUserSchema.prototype.getEmail = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.user_service.CreateUserSchema} returns this
	 */
	proto.trello.user_service.CreateUserSchema.prototype.setEmail = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};


	/**
	 * optional string username = 2;
	 * @return {string}
	 */
	proto.trello.user_service.CreateUserSchema.prototype.getUsername = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.user_service.CreateUserSchema} returns this
	 */
	proto.trello.user_service.CreateUserSchema.prototype.setUsername = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};


	/**
	 * optional string bio = 3;
	 * @return {string}
	 */
	proto.trello.user_service.CreateUserSchema.prototype.getBio = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.user_service.CreateUserSchema} returns this
	 */
	proto.trello.user_service.CreateUserSchema.prototype.setBio = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * optional string avatar = 4;
	 * @return {string}
	 */
	proto.trello.user_service.CreateUserSchema.prototype.getAvatar = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.user_service.CreateUserSchema} returns this
	 */
	proto.trello.user_service.CreateUserSchema.prototype.setAvatar = function(value) {
	  return jspb.Message.setProto3StringField(this, 4, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.trello.user_service.FullUserInfoResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.trello.user_service.FullUserInfoResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.trello.user_service.FullUserInfoResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.trello.user_service.FullUserInfoResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    data: (f = msg.getData()) && user_pb$1.UserSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.trello.user_service.FullUserInfoResponse}
	 */
	proto.trello.user_service.FullUserInfoResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.trello.user_service.FullUserInfoResponse;
	  return proto.trello.user_service.FullUserInfoResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.trello.user_service.FullUserInfoResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.trello.user_service.FullUserInfoResponse}
	 */
	proto.trello.user_service.FullUserInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new user_pb$1.UserSchema;
	      reader.readMessage(value,user_pb$1.UserSchema.deserializeBinaryFromReader);
	      msg.setData(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.trello.user_service.FullUserInfoResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.trello.user_service.FullUserInfoResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.trello.user_service.FullUserInfoResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.trello.user_service.FullUserInfoResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getData();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      user_pb$1.UserSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional trello.user.UserSchema data = 1;
	 * @return {?proto.trello.user.UserSchema}
	 */
	proto.trello.user_service.FullUserInfoResponse.prototype.getData = function() {
	  return /** @type{?proto.trello.user.UserSchema} */ (
	    jspb.Message.getWrapperField(this, user_pb$1.UserSchema, 1));
	};


	/**
	 * @param {?proto.trello.user.UserSchema|undefined} value
	 * @return {!proto.trello.user_service.FullUserInfoResponse} returns this
	*/
	proto.trello.user_service.FullUserInfoResponse.prototype.setData = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.trello.user_service.FullUserInfoResponse} returns this
	 */
	proto.trello.user_service.FullUserInfoResponse.prototype.clearData = function() {
	  return this.setData(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.trello.user_service.FullUserInfoResponse.prototype.hasData = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.trello.user_service.FullAllUserInfoResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.trello.user_service.FullAllUserInfoResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.trello.user_service.FullAllUserInfoResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.trello.user_service.FullAllUserInfoResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.trello.user_service.FullAllUserInfoResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    dataList: jspb.Message.toObjectList(msg.getDataList(),
	    user_pb$1.UserSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.trello.user_service.FullAllUserInfoResponse}
	 */
	proto.trello.user_service.FullAllUserInfoResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.trello.user_service.FullAllUserInfoResponse;
	  return proto.trello.user_service.FullAllUserInfoResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.trello.user_service.FullAllUserInfoResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.trello.user_service.FullAllUserInfoResponse}
	 */
	proto.trello.user_service.FullAllUserInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new user_pb$1.UserSchema;
	      reader.readMessage(value,user_pb$1.UserSchema.deserializeBinaryFromReader);
	      msg.addData(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.trello.user_service.FullAllUserInfoResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.trello.user_service.FullAllUserInfoResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.trello.user_service.FullAllUserInfoResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.trello.user_service.FullAllUserInfoResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDataList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      user_pb$1.UserSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated trello.user.UserSchema data = 1;
	 * @return {!Array<!proto.trello.user.UserSchema>}
	 */
	proto.trello.user_service.FullAllUserInfoResponse.prototype.getDataList = function() {
	  return /** @type{!Array<!proto.trello.user.UserSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, user_pb$1.UserSchema, 1));
	};


	/**
	 * @param {!Array<!proto.trello.user.UserSchema>} value
	 * @return {!proto.trello.user_service.FullAllUserInfoResponse} returns this
	*/
	proto.trello.user_service.FullAllUserInfoResponse.prototype.setDataList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.trello.user.UserSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.trello.user.UserSchema}
	 */
	proto.trello.user_service.FullAllUserInfoResponse.prototype.addData = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.trello.user.UserSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.trello.user_service.FullAllUserInfoResponse} returns this
	 */
	proto.trello.user_service.FullAllUserInfoResponse.prototype.clearDataList = function() {
	  return this.setDataList([]);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.trello.user_service.UpdateUserSchema.repeatedFields_ = [6,7];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.trello.user_service.UpdateUserSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.trello.user_service.UpdateUserSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.trello.user_service.UpdateUserSchema.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
	    email: jspb.Message.getFieldWithDefault(msg, 2, ""),
	    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
	    bio: jspb.Message.getFieldWithDefault(msg, 4, ""),
	    avatar: jspb.Message.getFieldWithDefault(msg, 5, ""),
	    activitiesList: jspb.Message.toObjectList(msg.getActivitiesList(),
	    activity_pb$1.ActivitySchema.toObject, includeInstance),
	    workspaceIdList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.trello.user_service.UpdateUserSchema}
	 */
	proto.trello.user_service.UpdateUserSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.trello.user_service.UpdateUserSchema;
	  return proto.trello.user_service.UpdateUserSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.trello.user_service.UpdateUserSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.trello.user_service.UpdateUserSchema}
	 */
	proto.trello.user_service.UpdateUserSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setEmail(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setUsername(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setBio(value);
	      break;
	    case 5:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setAvatar(value);
	      break;
	    case 6:
	      var value = new activity_pb$1.ActivitySchema;
	      reader.readMessage(value,activity_pb$1.ActivitySchema.deserializeBinaryFromReader);
	      msg.addActivities(value);
	      break;
	    case 7:
	      var value = /** @type {string} */ (reader.readString());
	      msg.addWorkspaceId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.trello.user_service.UpdateUserSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.trello.user_service.UpdateUserSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.trello.user_service.UpdateUserSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	  f = message.getEmail();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getUsername();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getBio();
	  if (f.length > 0) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = message.getAvatar();
	  if (f.length > 0) {
	    writer.writeString(
	      5,
	      f
	    );
	  }
	  f = message.getActivitiesList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      6,
	      f,
	      activity_pb$1.ActivitySchema.serializeBinaryToWriter
	    );
	  }
	  f = message.getWorkspaceIdList();
	  if (f.length > 0) {
	    writer.writeRepeatedString(
	      7,
	      f
	    );
	  }
	};


	/**
	 * optional string _id = 1;
	 * @return {string}
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.getId = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.user_service.UpdateUserSchema} returns this
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};


	/**
	 * optional string email = 2;
	 * @return {string}
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.getEmail = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.user_service.UpdateUserSchema} returns this
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.setEmail = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};


	/**
	 * optional string username = 3;
	 * @return {string}
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.getUsername = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.user_service.UpdateUserSchema} returns this
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.setUsername = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * optional string bio = 4;
	 * @return {string}
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.getBio = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.user_service.UpdateUserSchema} returns this
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.setBio = function(value) {
	  return jspb.Message.setProto3StringField(this, 4, value);
	};


	/**
	 * optional string avatar = 5;
	 * @return {string}
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.getAvatar = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.trello.user_service.UpdateUserSchema} returns this
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.setAvatar = function(value) {
	  return jspb.Message.setProto3StringField(this, 5, value);
	};


	/**
	 * repeated trello.activity.ActivitySchema activities = 6;
	 * @return {!Array<!proto.trello.activity.ActivitySchema>}
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.getActivitiesList = function() {
	  return /** @type{!Array<!proto.trello.activity.ActivitySchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, activity_pb$1.ActivitySchema, 6));
	};


	/**
	 * @param {!Array<!proto.trello.activity.ActivitySchema>} value
	 * @return {!proto.trello.user_service.UpdateUserSchema} returns this
	*/
	proto.trello.user_service.UpdateUserSchema.prototype.setActivitiesList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 6, value);
	};


	/**
	 * @param {!proto.trello.activity.ActivitySchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.trello.activity.ActivitySchema}
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.addActivities = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.trello.activity.ActivitySchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.trello.user_service.UpdateUserSchema} returns this
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.clearActivitiesList = function() {
	  return this.setActivitiesList([]);
	};


	/**
	 * repeated string workspace_id = 7;
	 * @return {!Array<string>}
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.getWorkspaceIdList = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
	};


	/**
	 * @param {!Array<string>} value
	 * @return {!proto.trello.user_service.UpdateUserSchema} returns this
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.setWorkspaceIdList = function(value) {
	  return jspb.Message.setField(this, 7, value || []);
	};


	/**
	 * @param {string} value
	 * @param {number=} opt_index
	 * @return {!proto.trello.user_service.UpdateUserSchema} returns this
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.addWorkspaceId = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.trello.user_service.UpdateUserSchema} returns this
	 */
	proto.trello.user_service.UpdateUserSchema.prototype.clearWorkspaceIdList = function() {
	  return this.setWorkspaceIdList([]);
	};


	goog.object.extend(exports, proto.trello.user_service); 
} (user_service_pb$1));

var user_service_pb = /*@__PURE__*/getDefaultExportFromCjs(user_service_pb$1);

module.exports = user_service_pb;
